#!/usr/bin/env python
from pathlib import Path
import argparse
import glob
import os
import subprocess
import sys
import time

_scriptRoot = os.path.dirname(os.path.realpath(__file__))
_scriptName = _scriptRoot.split('/')[-1]
_namespace  = _scriptName
os.chdir(_scriptRoot)

def printer(text, textlevel, loglevel):
    if textlevel <= loglevel:
        if loglevel > 0:
            print(text, file=sys.stderr)
        else:
            print(text)


def resolveZvol(path):
    zvol = None
    # Attempt to resolve the name of this zfs device
    for root, dirnames, filenames in os.walk('/dev/zvol'):
        for filename in filenames:
            fullZvol = '/'.join([root,filename])
            link = os.path.realpath(fullZvol)
            if link == args.path:
                zvol = '/'.join(fullZvol.split('/')[3:])
                break

    return(zvol)

def writeZfsInfo(args, dataset, outputFilenameComponents):
    """Write additional information about a mountpoint's ZFS properties and pool"""
    try:
        properties = subprocess.run(["zfs", "get", "all", dataset],             capture_output=True, text=True).stdout.strip("\n")
        zpool      = subprocess.run(["zpool", "status", dataset.split('/')[0]], capture_output=True, text=True).stdout.strip("\n")

        # Try to convert any disks listed in the output of zpool status to their by-id names
        # so the models are visible for benchmarking purposes
        globresult = glob.glob('/dev/disk/by-id/*')
        a = []
        b = []
        for thing in globresult:
    
            if   '-eui.' in thing:
                continue # Drop eui datasets as they don't describe the disk model
            elif '-part' in thing:
                a.append(thing)
            else:
                b.append(thing)

        globresultsorted = a + b

        for thing in globresultsorted:
            basename = os.path.basename(thing)
            link = os.path.basename(os.path.abspath(os.readlink(thing)))
            zpool = zpool.replace(link, basename)


        # Generate the output filename from the components we've put together
        keys = []
        for key in outputFilenameComponents:
            keys.append(str(outputFilenameComponents[key]))

        outputFile = "%s/%s.zfsinfo" % (args.output, '_'.join(keys))

        with open(outputFile, 'a') as f:
            f.write(str(zpool))
            f.write('\n\n')
            f.write(str(properties))

        return(True)
    except Exception as e:
        printer("Failed to write ZFS info: %s" % e, 2, args.loglevel)
        return(False)

def generateName(parameters, outputFilenameComponents):

    outputFilenameComponentsLocal = outputFilenameComponents.copy()

    if parameters['direct']:
        direct = 'direct'
    else:
        direct = 'indirect'

    outputFilenameComponentsLocal['bs']      = parameters['bs']
    outputFilenameComponentsLocal['rw']      = parameters['rw']
    outputFilenameComponentsLocal['numjobs'] = "%sjob" % parameters['numjobs']

    keys = []
    for key in outputFilenameComponentsLocal:
        keys.append(str(outputFilenameComponentsLocal[key]))

    return('_'.join(keys))

def runFio(args, tests):
    inc = 0
    total = len(tests)
    for test in tests:
        inc = inc + 1
        printer("Running test %s/%s" % (inc, total), 1, args.loglevel)
        parameters = test

        flags = ['fio']
        for key in parameters:
            flags.append("--%s=%s" % (key, parameters[key]))

        printer("Running with flags: %s" % flags, 7, args.loglevel)

        subprocess.run(flags)


def generateTests(args, parameters, outputFilenameComponents):

    tests = []
    # Read direct
    parameters['direct'] = 1
    parameters['rw']     = "read"

    parameters['numjobs'] = 1
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 2
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 4
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    # Read indirect
    parameters['direct']  = 0

    parameters['numjobs'] = 1
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 2
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 4
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    # Write direct
    parameters['direct']  = 1
    parameters['rw']      = "write"

    parameters['numjobs'] = 1
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())
    
    parameters['numjobs'] = 2
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())
    
    parameters['numjobs'] = 4
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())
    
    # Write indirect
    parameters['direct']  = 0

    parameters['numjobs'] = 1
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 2
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 4
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    # randread direct
    parameters['direct']  = 1
    parameters['rw']      = "randread"

    parameters['numjobs'] = 1
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 2
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 4
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    # randread indirect
    parameters['direct']  = 0

    parameters['numjobs'] = 1
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 2
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 4
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())


    # randwrite direct
    parameters['direct']  = 1
    parameters['rw']      = "randwrite"

    parameters['numjobs'] = 1
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 2
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 4
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    # randwrite indirect
    parameters['direct']  = 0

    parameters['numjobs'] = 1
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 2
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 4
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    # randrw direct
    parameters['direct']  = 1
    parameters['rw']      = "randrw"

    parameters['numjobs'] = 1
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 2
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 4
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    # randrw indirect
    parameters['direct']  = 0

    parameters['numjobs'] = 1
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 2
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    tests.append(parameters.copy())

    parameters['numjobs'] = 4
    parameters['name']    = generateName(parameters, outputFilenameComponents)
    parameters['output']  = "%s/%s.json" % (args.output, parameters['name'])
    parameters['unlink']  = 1
    tests.append(parameters.copy())

    return(tests)

def runBenchmarks(args, outputFilenameComponents):

    parameters = {
            "bs":            None,
            "direct":        None,
            "filename":      args.path,
            "ioengine":      "libaio",
            "name":          None,
            "numjobs":       None,
            "output":        None,
            "output-format": "json",
            "rw":            None,
            "size":          "4G",
            "timeout":       60,
            "unlink":        0
            }


    tests = []

    parameters['bs'] = '512'
    tests = tests + generateTests(args, parameters, outputFilenameComponents)

    parameters['bs'] = '4096'
    tests = tests + generateTests(args, parameters, outputFilenameComponents)

    parameters['bs'] = '1m'
    tests = tests + generateTests(args, parameters, outputFilenameComponents)

    runFio(args, tests)

def main():

    parser = argparse.ArgumentParser(
        prog='fioBench',
        description='Run a series of storage benchmarks with fio.',
        epilog='')

    parser.add_argument(
            '--debug',
            action='store_true',
            default=False,
            help='Enable debug logging (Implies --loglevel 7)'
            )
    
    parser.add_argument(
            '--loglevel',
            default=2,
            type=int,
            help='Set the loglevel. Defaults to 2 (Error)'
            )

    parser.add_argument(
            '--output',
            default='results',
            type=str,
            help='A directory for results. Default: results'
            )
    
    parser.add_argument(
            '--path',
            required=True,
            help='A file, device or directory to test against'
            )

    args      = parser.parse_args()
    args.path = os.path.abspath(args.path)
    ZFS       = None

    if args.debug:
        args.loglevel = 7

    #if not args.mode:
    #    printer("debug test", 7, args.loglevel)

    if not os.path.isdir(args.output):
        os.mkdir(args.output)

    hostname    = os.uname()[1].split('.')[0]
    args.output = "%s/%s" % (args.output, hostname)

    if not os.path.isdir(args.output):
        os.mkdir(args.output)

    source = subprocess.run(["findmnt", "-n", "-o", "SOURCE", "--target", os.path.dirname(args.path)], capture_output=True, text=True).stdout.strip("\n")
    fstype = subprocess.run(["findmnt", "-n", "-o", "fstype", source], capture_output=True, text=True).stdout.strip("\n")

    if args.path.startswith('/dev/zvol/'):
        fstype = 'zvol'
        ZFS = '/'.join(args.path.split('/')[3:])
    elif args.path.startswith('/dev/zd'):
        zvol = resolveZvol(args.path)
        if zvol:
            ZFS = zvol
        else:
            printer("Failed to resolve to zvol name: %s" % args.path, 2, args.loglevel)
            printer(".zfsinfo file will be unavailable for this run.", 2, args.loglevel)

    elif fstype == 'zfs':
        ZFS    = source
        fstype = fstype

    elif source.startswith('dev') or fstype.startswith('dev'):
        fstype = 'dev'

    else:
        fstype = fstype


    print("Testing:\t%s" % args.path)
    print("source:\t\t%s" % source)
    print("fstype:\t\t%s" % fstype)

    outputFilenameComponents = {
            "timestamp": round(time.time()),
            "hostname": hostname,
            "type": fstype,
            "item": os.path.basename(args.path)
            }

    
    # Write an additional ZFS information file if relevant.
    if ZFS:
        writeZfsInfo(args, ZFS, outputFilenameComponents)

    runBenchmarks(args, outputFilenameComponents)

if __name__ == '__main__':
    main()
